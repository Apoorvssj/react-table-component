[{"/Users/anandjeechoubey/Desktop/react-table-component/src/index.tsx":"1","/Users/anandjeechoubey/Desktop/react-table-component/src/lib/index.ts":"2","/Users/anandjeechoubey/Desktop/react-table-component/src/lib/table/Table.tsx":"3","/Users/anandjeechoubey/Desktop/react-table-component/src/lib/table/TableRow.tsx":"4","/Users/anandjeechoubey/Desktop/react-table-component/src/lib/utils/index.ts":"5","/Users/anandjeechoubey/Desktop/react-table-component/src/lib/utils/Loader.tsx":"6"},{"size":612,"mtime":1634201654996,"results":"7","hashOfConfig":"8"},{"size":59,"mtime":1634201239958,"results":"9","hashOfConfig":"8"},{"size":2766,"mtime":1634201278654,"results":"10","hashOfConfig":"8"},{"size":3616,"mtime":1634111743012,"results":"11","hashOfConfig":"8"},{"size":35,"mtime":1634192999669,"results":"12","hashOfConfig":"8"},{"size":207,"mtime":1634192970665,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jmvebi",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/Users/anandjeechoubey/Desktop/react-table-component/src/index.tsx",[],"/Users/anandjeechoubey/Desktop/react-table-component/src/lib/index.ts",[],"/Users/anandjeechoubey/Desktop/react-table-component/src/lib/table/Table.tsx",[],"/Users/anandjeechoubey/Desktop/react-table-component/src/lib/table/TableRow.tsx",["28","29","30"],"import React, { useState, useEffect } from \"react\";\nimport { Checkbox, Table, Icon } from \"semantic-ui-react\";\nimport { TableComponent } from \"./Table\";\n\ntype TableRowProps = {\n\trow: any;\n\tcol: any;\n\tallChecked?: boolean;\n\tsetAllChecked?: any;\n\tarrayOfChecked?: Array<any>;\n\tsetArrayOfChecked?: any;\n\tcheckBoxes?: boolean;\n\turl?: string;\n\tcollapsable?: boolean;\n\tsubCol?: any;\n\tsubRowKey?: string;\n};\n\nconst TableRow = ({\n\trow,\n\tcol,\n\tallChecked = false,\n\tsetAllChecked,\n\tarrayOfChecked = [],\n\tsetArrayOfChecked,\n\tcheckBoxes = false,\n\turl = \"\",\n\tcollapsable = false,\n\tsubCol = [],\n\tsubRowKey = \"\",\n}: TableRowProps): JSX.Element => {\n\tconst [check, setCheck] = useState(false);\n\tconst [rowUrl, setRowUrl] = useState(url);\n\tconst [isOpen, setOpen] = useState(false);\n\tconst [subRows, setSubRows] = useState([]);\n\n\tconst handleCheck = () => {\n\t\tif (check) {\n\t\t\tsetArrayOfChecked(arrayOfChecked.filter((value) => value !== row.id));\n\t\t} else {\n\t\t\tsetArrayOfChecked([...arrayOfChecked, row.id]);\n\t\t}\n\t\tsetCheck(!check);\n\t\tsetAllChecked(false);\n\t};\n\n\tuseEffect(() => {\n\t\tif (allChecked) {\n\t\t\tsetCheck(allChecked);\n\t\t} else {\n\t\t\tconst index = arrayOfChecked.indexOf(row.id);\n\t\t\tsetCheck(index >= 0);\n\t\t}\n\t}, [allChecked, JSON.stringify(arrayOfChecked)]);\n\n\tuseEffect(() => {\n\t\tif (url?.length) {\n\t\t\tconst temp = url.split(\"{\");\n\t\t\tconst id = temp[1].split(\"}\");\n\t\t\tsetRowUrl(temp[0] + row[id[0]]);\n\t\t}\n\n\t\tif (collapsable) {\n\t\t\tconst keys = subRowKey.split(\".\");\n\t\t\tlet result = row;\n\t\t\tkeys.forEach((keyMain: string) => {\n\t\t\t\tresult = result[keyMain] ? result[keyMain] : \"-\";\n\t\t\t});\n\t\t\tif (typeof result === \"object\") {\n\t\t\t\tsetSubRows(result);\n\t\t\t}\n\t\t}\n\t}, []);\n\n\treturn row ? (\n\t\t<>\n\t\t\t<Table.Row key={row.id} className=\"table_row\">\n\t\t\t\t{checkBoxes ? (\n\t\t\t\t\t<Table.Cell>\n\t\t\t\t\t\t<Checkbox checked={check} onChange={handleCheck} />\n\t\t\t\t\t</Table.Cell>\n\t\t\t\t) : null}\n\t\t\t\t{col.map(\n\t\t\t\t\t({ key, label, type, formatter, action, align, text, image }) => {\n\t\t\t\t\t\tlet result = row;\n\t\t\t\t\t\tlet target = \"\";\n\n\t\t\t\t\t\tif (key.length) {\n\t\t\t\t\t\t\tconst keys = key.split(\".\");\n\t\t\t\t\t\t\tkeys.forEach((keyMain: string) => {\n\t\t\t\t\t\t\t\tresult = result[keyMain] ? result[keyMain] : \"-\";\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (type === \"link\" || type === \"action\") {\n\t\t\t\t\t\t\ttarget = result;\n\t\t\t\t\t\t\tresult = label;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst getTableCellText = () => {\n\t\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\t\tif (formatter) return formatter(result);\n\t\t\t\t\t\t\t\tif (image) return image(target);\n\t\t\t\t\t\t\t\tif (text) return text;\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn \"-\";\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Table.Cell\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tif (rowUrl.length && type !== \"link\") {\n\t\t\t\t\t\t\t\t\t\twindow.open(rowUrl, \"_blank\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (type === \"link\" && target.length) {\n\t\t\t\t\t\t\t\t\t\twindow.open(target, \"_blank\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (type === \"action\" && action) {\n\t\t\t\t\t\t\t\t\t\taction(target);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (type === \"collapsable\") {\n\t\t\t\t\t\t\t\t\t\tsetOpen((open) => !open);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\ttextAlign={align || \"left\"}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{getTableCellText()}\n\t\t\t\t\t\t\t\t{type === \"collapsable\" ? (\n\t\t\t\t\t\t\t\t\tisOpen ? (\n\t\t\t\t\t\t\t\t\t\t<Icon name=\"angle up\" />\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<Icon name=\"angle down\" />\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t) : null}\n\t\t\t\t\t\t\t</Table.Cell>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t)}\n\t\t\t</Table.Row>\n\t\t\t{collapsable && isOpen ? (\n\t\t\t\t<Table.Row>\n\t\t\t\t\t<Table.Cell\n\t\t\t\t\t\tcolSpan={checkBoxes ? col.length + 2 : col.length + 1}\n\t\t\t\t\t\tstyle={{ background: \"rgba(229,229,229,0.5)\", padding: 20 }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<TableComponent rows={subRows} columns={subCol} />\n\t\t\t\t\t</Table.Cell>\n\t\t\t\t</Table.Row>\n\t\t\t) : null}\n\t\t</>\n\t) : null;\n};\n\nexport default TableRow;\n","/Users/anandjeechoubey/Desktop/react-table-component/src/lib/utils/index.ts",[],"/Users/anandjeechoubey/Desktop/react-table-component/src/lib/utils/Loader.tsx",["31","32"],"import React from \"react\";\n\nimport \"./index.css\";\n\ntype Loader = {\n\tmessage?: string;\n};\n\nexport const Loader = ({ message }: Loader) => {\n\treturn <div className=\"loader\">{message || \"Loading...\"}</div>;\n};\n",{"ruleId":"33","severity":1,"message":"34","line":54,"column":5,"nodeType":"35","endLine":54,"endColumn":49,"suggestions":"36"},{"ruleId":"33","severity":1,"message":"37","line":54,"column":18,"nodeType":"38","endLine":54,"endColumn":48},{"ruleId":"33","severity":1,"message":"39","line":73,"column":5,"nodeType":"35","endLine":73,"endColumn":7,"suggestions":"40"},{"ruleId":"41","severity":1,"message":"42","line":9,"column":14,"nodeType":"43","messageId":"44","endLine":9,"endColumn":20},{"ruleId":"45","severity":1,"message":"46","line":9,"column":37,"nodeType":"43","messageId":"47","endLine":9,"endColumn":43},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'arrayOfChecked' and 'row.id'. Either include them or remove the dependency array.","ArrayExpression",["48"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has missing dependencies: 'collapsable', 'row', 'subRowKey', and 'url'. Either include them or remove the dependency array. If 'setRowUrl' needs the current value of 'row', you can also switch to useReducer instead of useState and read 'row' in the reducer.",["49"],"@typescript-eslint/no-redeclare","'Loader' is already defined.","Identifier","redeclared","@typescript-eslint/no-unused-vars","'Loader' is assigned a value but never used.","unusedVar",{"desc":"50","fix":"51"},{"desc":"52","fix":"53"},"Update the dependencies array to be: [allChecked, arrayOfChecked, row.id]",{"range":"54","text":"55"},"Update the dependencies array to be: [collapsable, row, subRowKey, url]",{"range":"56","text":"57"},[1202,1246],"[allChecked, arrayOfChecked, row.id]",[1651,1653],"[collapsable, row, subRowKey, url]"]